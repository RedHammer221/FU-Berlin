a) Klassenmethoden zu deklarieren ist sinnvoll, wenn Methoden semantisch zu einer Klasse zugeordnet werden können. 
Damit wird Code verständlicher, aber es muss immer ain Objekt instanziiert werden, bevor die Methode aufgerufen werden kann.

b)Lokale Variablen müssen nicht als private deklariert werden, weil sie sonst von außerhalb der Klasse nicht lesbar bzw. änderbar sind. 
Klassenmethoden können als private deklariert werden. Das ist sinnvoll, wenn die Methode nicht von außerhalb aufrufbar sein soll, 
aber innerhalb der Klasse gebraucht wird. Meistens sind das Hilfsmethoden.

c)Es ist nicht notwendig einen Konstruktor explizit zu definieren. Wenn keiner definiert wird, gilt der Standardkonstruktor ( public someClass() { } )
Konstruktoren können Vererbt werden. In der Unterklasse wird dazu im Konstruktor „super()“ aufgerufen. Konstruktoren können auch privat deklariert werden.

d)protected Instanzvariablen sind innerhalb der Klasse, der package und in allen Subklassen aufrufbar, jedoch nicht von außerhalb. 
Konstruktoren können protected sein

(e/f) abstrakte Klassen sind Klassen, die sich nicht instanziieren lassen. Eine Klasse ist abstrakt, wenn sie eine Methode enthält, die eine erbende Klasse implementieren muss. 
In abstrakten Klassen können Variablen deklariert und Methoden implementiert werden. Der Zweck von abstrakten Klassen ist es, 
als Strukturelement in der Vererbungshierarchie zu fungieren. Man kann keine Konstruktoren in abstrakten Klassen definieren.

g)Beispiel: 
Klasse B: Tier
Klasse A: Hund (extends Tier)
Tier tier = new Tier()
tier = new Hund()
Das macht Sinn, weil ein Hund auch ein Tier ist.

h)Ja, weil Vererbung.

i)Beim automatischen boxing/unboxing werden Primitive Datentypen (int, double, string…) vom Java Compiler zu ihren Objekt Wrappern konvertiert (Interger, Double, String). 
Diese haben beispielsweise Methoden, welche auf die variablen angewendet werden können (z.B. parseInt() bei Integer) Ein potenzielles problem ist schlechte Performance

j)Generische Klassen verhindern ClassCastExceptions zur Laufzeit, indem sie einen Typ bei der deklarierung verlangen. 
Beispiel: ArrayList<String> -> Liste mit Elementen vom Typ String. Ohne Generische Klassen besteht das Problem, dass zur Laufzeit nicht klar ist, 
welchen Typ die Elemente in der Liste haben und es kann zu Fehlern kommen.

k)Polymorphie ermöglicht in der objektorientierten Programmierung, dass ein Bezeichner je nach Verwendung im Code zu unterschiedlichen Datentypen wird

l)Ausnahmefehler sind Fehler die abgefangen werden. Dadurch wird verhindert, dass das Programm fehlerhaft weiterläuft. 
Allgemeine Exceptions können jederzeit auftreten, während Runtime-Exceptions nur zur tatsächlichen Laufzeit, also während des Ausführens des Programms auftreten können.